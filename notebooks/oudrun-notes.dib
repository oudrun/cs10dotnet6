#!markdown

# oudrun - Personal notes for this book

#!markdown

I'll add my personal notes and snippets here insted of altering original notes from the author.

#!csharp

// Testing .NET interactive
using static System.Console;

int a = 10;
int b = 23;

//display(a+b);

WriteLine(a+b);

#!csharp

//touple - how to use
var xs = new[] {4,6,9};

// naming tuple fields
var tot = (sum: 400, rente: 25);

WriteLine(tot.sum);
(int total, int rentesats) = GetTupleMethod();

var t = 
(1, 2, 3.5, "4", 5, 6, 7, 8, 9, 10,
11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26);
Console.WriteLine(t.Item26);  // output: 26

WriteLine(t.Item5);

#!markdown

### Tuple
As I understand it a *tuple* is a datastructure. A type you can easily set up as a datatruktur with differnet type

#!csharp

// Create a 3-tuple using its constructor
var author = new Tuple<string, string, int>("Mahesh Chand", "ADO.NET Programming", 2003);

// Display author info
System.Console.WriteLine("Author {0} wrote his first book titled {1} in {2}.", author.Item1, author.Item2, author.Item3);

//or
// Create a 5-tuple using it's "Create" method.
var pubAuthor = Tuple.Create("Mahesh Chand", "Graphics Programming with GDI+", "Addison Wesley", 2004, 49.95);
System.Console.WriteLine("Author {0} wrote his fourth book titled {1} for {2} in {3}. Price: {4}",
pubAuthor.Item1, pubAuthor.Item2, pubAuthor.Item3, pubAuthor.Item4, pubAuthor.Item5);

#!markdown

We can also make up a *tuple* with named fields:

#!csharp

(double, int) t1 = (4.5, 3);
Console.WriteLine($"Tuple with elements {t1.Item1} and {t1.Item2}.");
// Output:
// Tuple with elements 4.5 and 3.

(double Sum, int Count) t2 = (4.5, 3);
Console.WriteLine($"Sum of {t2.Count} elements is {t2.Sum}.");
// Output:
// Sum of 3 elements is 4.5.

#!csharp

public (string, int) GetFruit()
{
    return ("Apple", 5);
}

(string, int) fruit = bob.GetFruit();
